Option Explicit

Private header As Variant
Private fetch As Variant
Private result As Variant
Private searchCol As Long
Private origin As Range

'hdrの列サイズを超えるdataの列は除外される
Sub SetInit(hdr As Range, data As Range)
    
    Dim temp As Variant
    Dim i As Integer
    Dim j As Long
    
    'headerの行要素数は必ず1
    temp = hdr
    ReDim header(1 To 1, 1 To UBound(temp, 2))
    For i = 1 To UBound(header, 2)
        header(1, i) = temp(1, i)
    Next i

    'resultの列要素数はheaderの列要素数に依存する
    temp = data
    ReDim result(1 To UBound(temp), 1 To UBound(header, 2))
    For i = 1 To UBound(result)
        For j = 1 To UBound(result, 2)
            result(i, j) = temp(i, j)
        Next j
    Next i
    
    Set origin = data.Cells(1, 1)
    
End Sub

'resultを1行増やします
Private Sub AddNewRecord()
    
    Dim temp As Variant
    Dim i As Long
    Dim j As Long
    
    If IsValidArray(fetch) Then
        'Add
        ReDim temp(1 To UBound(fetch) + 1, 1 To UBound(fetch, 2))
        
        'Refill
        For i = 1 To UBound(fetch)
            For j = 1 To UBound(fetch, 2)
                temp(i, j) = fetch(i, j)
            Next j
        Next i
    Else
        'New
        ReDim temp(1 To 1, 1 To UBound(result, 2))
    End If
    
    fetch = temp

End Sub

'resultにsearchKeyとsearchValueで検索をかけ、結果セットをresultに再代入します
'見つかった場所の最初の位置がoriginに入ります
Function GetCurser(searchKey As String, searchValue As String) As Variant

    Dim i As Long
    Dim j As Long
    Dim b As Boolean
    Dim firstFlg As Boolean
    
    'Reset
    Set fetch = Nothing
    
    'SetInitをしていないと処理しない
    If IsValidArray(result) Then
    
        'headerを全部まわって、searchKeyと一致するものがあるか
        For i = 1 To UBound(header, 2)
            If header(1, i) = searchKey Then
                'Found out
                b = True
                searchCol = i
                Exit For
            End If
        Next i
        
        'headerにsearchKeyがあったら検索開始
        firstFlg = True
        If b Then
            
            'Reset
            b = False
            
            For i = 1 To UBound(result)
                
                If result(i, searchCol) = searchValue Then
                    
                    'Found out
                    b = True
                    If firstFlg Then
                        Set origin = origin.Cells(i, 1)
                        firstFlg = False
                    End If
                    
                    AddNewRecord
                    
                    'Refill
                    For j = 1 To UBound(fetch, 2)
                        fetch(UBound(fetch), j) = result(i, j)
                    Next j
                                        
                End If
                
            Next i
        
        End If
        
        If Not b Then
            AddNewRecord
        End If
        
    End If
    
    result = fetch
    GetCurser = result
        
End Function

'resultにsearchKeyとsearchValueで検索をかけ、結果セットをRangeで返します
Function GetCurser_r(searchKey As String, searchValue As String) As Range

    'resultを更新
    GetCurser searchKey, searchValue
    
    If Not IsEmpty(result(1, 1)) Then
        Set GetCurser_r = origin.Resize(UBound(result), UBound(result, 2))
    End If
    
End Function

Private Function IsValidArray(targetArray As Variant) As Boolean
    
    'targetArrayがnullかどうかを調べる関数。
    '本来この関数はいらなくて if targetArray = null then... とやりたいところだが
    'vbaでは、配列にnullを仕込むことができないため、わざわざエラー無視の状態にして、
    '強制的に配列の第一次元目の要素数を求める
    '配列にアクセスできてなければ（エラーがhitしていれば）falseを返す（配列がnullってるってこと）
    '配列にアクセスできれば、trueを返す
    
    Dim checkValue As Variant
    Dim retValue As Boolean
    
    On Error Resume Next                                            'エラーを無効化
    
    checkValue = UBound(targetArray, 1)                             '強制的に配列の第一次元目の要素数を求める
    
    If Err.Number > 0 Then                                          'Errorが発生したら、未定義配列です。
        retValue = False
    Else                                                            'そうでないなら、1以上の要素が宣言済みです。
        retValue = True
    End If
    Err.Clear                                                       'エラーオブジェクト初期化
    
    On Error GoTo 0                                                 'エラーを有効化
    
    IsValidArray = retValue                                         '検査結果を返す

End Function

