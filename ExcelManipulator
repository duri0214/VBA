Option Explicit

'r を連結（単一ディレクションにおいての使用を前提としているが、連結順番としては右に行って1段下がるを繰り返す）
Function ConcatenateRangeValue(r As Range, delimiter As String) As String

    Dim temp As Range
    Dim retValue As String
    Dim firstFlg As Boolean
    
    firstFlg = True
    For Each temp In r
        If firstFlg Then
            retValue = temp.value
            firstFlg = False
        Else
            retValue = retValue & delimiter & temp.value
        End If
    Next temp
    
    ConcatenateRangeValue = retValue
    
End Function

'シートがあったらTrue
Function IsSheetExists(bk As Workbook, sh_name As String) As Boolean

    Dim sh As Worksheet
    Dim retValue As Boolean
    
    For Each sh In bk.Worksheets
        If sh.Name = sh_name Then
            retValue = True
            Exit For
        End If
    Next sh
    
    IsSheetExists = retValue

End Function

'左上隅をA1に移動する
Sub MoveA1(sh As Worksheet)
    sh.Parent.Application.GoTo sh.Range("A1"), True
End Sub

'ブックの名前の定義を削除
Sub GenocideNameInTheBook(bk As Workbook)

    Dim n As Name
    
    For Each n In bk.Names
        n.Delete
    Next
    
End Sub

'エクセルファイルにはびこる「外部ファイルへのリンク」を解除します
Sub GenocideExternalBookLink(bk As Workbook)

    Dim aLink As Variant
    Dim i As Long
    
    aLink = bk.LinkSources(Type:=xlLinkTypeExcelLinks)

    If Not IsEmpty(aLink) Then
        For i = UBound(aLink) To 1 Step -1
            bk.BreakLink aLink(i), xlLinkTypeExcelLinks
        Next i
    End If
    
End Sub

Function GetOwnFolderPath() As String
    
    '「C:\hoge\hage.mdb」上で、このメソッドを使用した場合、
    '「C:\hoge」が返る
    
    GetOwnFolderPath = ThisWorkbook.path
    
End Function

Function GetOwnFileName() As String
    
    '「C:\hoge\hage.mdb」上で、このメソッドを使用した場合、
    '「hage.mdb」が返る
    
    GetOwnFileName = ThisWorkbook.Name
    
End Function

Function GetOwnFullPath() As String
    
    '「C:\hoge\hage.mdb」上で、このメソッドを使用した場合、
    '「C:\hoge\hage.mdb」が返る
    
    GetOwnFullPath = ThisWorkbook.FullName
    
End Function

'Excel で列番号を英文字に変換する
'https://support.microsoft.com/ja-jp/help/833402/how-to-convert-excel-column-numbers-into-alphabetical-characters
Function ConvertToLetter(iCol As Integer) As String
   Dim iAlpha As Integer
   Dim iRemainder As Integer
   iAlpha = Int((iCol - 1) / 26)
   iRemainder = iCol - (iAlpha * 26)
   If iAlpha > 0 Then
      ConvertToLetter = Chr(iAlpha + 64)
   End If
   If iRemainder > 0 Then
      ConvertToLetter = ConvertToLetter & Chr(iRemainder + 64)
   End If
End Function

'"項目名:値1,値2,値3"（※シングルアクションです！）
Function GetFilteredRange(header As Range, filter As String) As Range
    
    Dim temp As Variant
    
    Dim i As Integer
    Dim filter_col As Integer
    Dim filter_value() As String
    Dim b As Boolean
    Dim r As Range
    
    temp = header
    
    '項目名のある列位置を探す
    Dim colOffset As Integer
    For i = 1 To UBound(temp, 2)
        If temp(1, i) = Split(filter, ":")(0) Then
            colOffset = header(1, 1).column - 1
            filter_col = header(1, i).column - colOffset
            Exit For
        End If
    Next i
    
    '抽出するパラメータ
    filter_value = Split(Split(filter, ":")(1), ",")
    For i = 0 To UBound(filter_value)
        If filter_value(i) = "<>" Then
            b = True
            Exit For
        End If
    Next i
    
    'オートフィルタ
    Set r = header.Parent.Range(header, header.SpecialCells(xlCellTypeLastCell))
    If b Then
        'パラメータに "<>"（＝空白以外すべて）が含まれているときは、配列で突っ込むと実行時エラーが起きるため対応
        r.AutoFilter filter_col, "<>", xlFilterValues
    Else
        '複数パラメータに対応できる
        r.AutoFilter filter_col, filter_value, xlFilterValues
    End If
    
    Set GetFilteredRange = header.Parent.Range(header, header.SpecialCells(xlCellTypeLastCell))
    
End Function

Sub CreatePivotTable(pvt_name As String, pvt_group As String, pvt_col As String, pvt_value As String, aggType As XlConsolidationFunction, pvt_headerAndData As Range, pvt_destination As Range, is_subtotal_unnecessary As Boolean)
    
    Dim i As Integer
    Dim temp As Variant
    
    'ピボットテーブルを作成（データソース指定は文字列なんだそうだ）
    pvt_destination.Parent.Parent.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=pvt_headerAndData.Address(External:=True)).CreatePivotTable TableDestination:=pvt_destination, TableName:=pvt_name

    'ピボット行の指定
    temp = Split(pvt_group, ",")
    ReDim Preserve temp(1 To UBound(temp) + 1)
    For i = 1 To UBound(temp)
        pvt_destination.Parent.PivotTables(pvt_name).PivotFields(temp(i)).Orientation = xlRowField
        pvt_destination.Parent.PivotTables(pvt_name).PivotFields(temp(i)).Position = i
    Next i
    
    If pvt_col <> vbNullString Then
        'ピボット列の指定
        temp = Split(pvt_col, ",")
        ReDim Preserve temp(1 To UBound(temp) + 1)
        For i = 1 To UBound(temp)
            pvt_destination.Parent.PivotTables(pvt_name).PivotFields(temp(i)).Orientation = xlColumnField
            pvt_destination.Parent.PivotTables(pvt_name).PivotFields(temp(i)).Position = i
        Next i
    End If

    'ピボット値の指定
    temp = Split(pvt_value, ",")
    ReDim Preserve temp(1 To UBound(temp) + 1)
    For i = 1 To UBound(temp)
        pvt_destination.Parent.PivotTables(pvt_name).AddDataField pvt_destination.Parent.PivotTables(pvt_name).PivotFields(temp(i)), "集計 / " & temp(i), aggType
    Next i

    '表形式にします
    pvt_destination.Parent.PivotTables(pvt_name).RowAxisLayout xlTabularRow
    
    'グループ行のラベルを繰り返す
    pvt_destination.Parent.PivotTables(pvt_name).RepeatAllLabels xlRepeatLabels
    
    '行と列の集計を行わない（総計を出さない）
    pvt_destination.Parent.PivotTables(pvt_name).ColumnGrand = False
    pvt_destination.Parent.PivotTables(pvt_name).RowGrand = False
    
    '小計は不要です
    If is_subtotal_unnecessary Then
        Dim pv_fld As PivotField
        For Each pv_fld In ActiveSheet.PivotTables(1).PivotFields
            pv_fld.Subtotals(1) = True
            pv_fld.Subtotals(1) = False
        Next pv_fld
    End If

End Sub

'filteringColName の列の "値1,値2,値3" のパラメータを b にして、listの値以外をすべて b の反対にする
Sub SetFilterOnPivotTable(pvt As PivotTable, filteringColName As String, list As String, b As Boolean)
    
    Dim temp As Variant
    Dim i As Integer
    Dim item As PivotItem
    
    temp = Split(list, ",")
    ReDim Preserve temp(1 To UBound(temp) + 1)
    
    For Each item In pvt.PivotFields(filteringColName).PivotItems
        For i = 1 To UBound(temp)
            If item.value = temp(i) Then
                item.Visible = b
                Exit For
            Else
                item.Visible = Not b
            End If
        Next i
    Next item
  
End Sub

'Excel限界を考慮した終端（行または列）を取得
'ただし、終端（行または列）に移動してから逆方向にEndをかけるため、終端に値が入っている場合はバグる
'この辺は使い分けだと思います
Function GetEnd(r As Range, direction As XlDirection) As Range

    Dim retValue As Range
    
    Select Case direction
        Case xlDown
            'いちど最下行に行ってから Ctrl+↑
            Set retValue = r.Parent.Cells(r.Parent.Rows.Count, r.column).End(xlUp)
        Case xlToLeft
            'いちど最左端に行ってから Ctrl+ →
            Set retValue = r.Parent.Cells(r.row, 1).End(xlToRight)
        Case xlToRight
            'いちど最右端に行ってから Ctrl+ ←
            Set retValue = r.Parent.Cells(r.row, r.Parent.Columns.Count).End(xlToLeft)
        Case xlUp
            'いちど最上端に行ってから Ctrl+ ↓
            Set retValue = r.Parent.Cells(1, r.column).End(xlDown)
    End Select
    
    Set GetEnd = retValue
    
End Function

'GetEndを利用して基準セル r から、direction 方面に向かってデータの塊領域を取得
Function GetRegion(r As Range, direction As XlDirection, Optional inverse = False) As Range
    If Not inverse Then
        Set GetRegion = r.Parent.Range(r, r.End(direction))
    Else
        Set GetRegion = r.Parent.Range(r, GetEnd(r, direction))
    End If
End Function

'IsFileExistsAndNotUsingをFSOSuiteから移管（下のIsFileExistsとIsFileUsingを使用）
Private Function IsFileExists(filePath As String) As Boolean
    '▲notice
    'ファイルの存在有無を2値で返します
    'DIR関数を1ループの中で複数回使いたいときに使用します。
    'たとえば、フォルダのファイルを全て処理するルーチンで、最初にDIRを使用して
    'すべてのファイルを処理しようとする中で、さらに単ファイルの存在有無処理が必要に
    'なったときDIR関数を使うとエラーになります。そのときにこの関数で代替します。
    Dim objFSO As Object
    Dim retValue As Boolean
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    retValue = objFSO.FileExists(filePath)
    IsFileExists = retValue
End Function
Private Function IsFileUsing(path As String) As Boolean
    Dim fileSequence As Integer
    Dim retValue As Boolean
    If Dir(path) <> "" Then
        fileSequence = FreeFile
        On Error Resume Next
        Open path For Binary Lock Read Write As #fileSequence
        Close #fileSequence
    End If
    If Err.Number > 0 Then
        retValue = True
        On Error GoTo 0
    End If
    IsFileUsing = retValue
End Function
Function IsFileExistsAndNotUsing(path As String) As Boolean
    Dim retValue As Boolean
    If IsFileExists(path) And Not IsFileUsing(path) Then
        retValue = True
    End If
    IsFileExistsAndNotUsing = retValue
End Function

'範囲r の最左列を検索して相対的な位置を返す（見つからない場合は0）
'e.g. r:="B3:C5", search_at:="hoge" ... B4にhoge => 2
Function get_relative_row(r As Range, search_at As String) As Long

    Dim buf As Range
    Dim offset_at As Long
    Dim retValue As Long
    Set buf = r.Find(search_at) 'B4
    If Not buf Is Nothing Then
        retValue = buf.row - (r(1, 1).row - 1) '4-(3-1)
    End If
    get_relative_row = retValue

End Function
