Option Explicit

'エクセルファイルにはびこる「外部ファイルへのリンク」を解除します
Sub GenocideExternalBookLink(bk As Workbook)

    Dim aLink As Variant
    Dim i As Long
    
    aLink = bk.LinkSources(Type:=xlLinkTypeExcelLinks)

    If Not IsEmpty(aLink) Then
        For i = UBound(aLink) To 1 Step -1
            bk.BreakLink aLink(i), xlLinkTypeExcelLinks
        Next i
    End If
    
End Sub

Function GetOwnFolderPath() As String
    
    '「C:\hoge\hage.mdb」上で、このメソッドを使用した場合、
    '「C:\hoge」が返る
    
    GetOwnFolderPath = ThisWorkbook.path
    
End Function

Function GetOwnFileName() As String
    
    '「C:\hoge\hage.mdb」上で、このメソッドを使用した場合、
    '「hage.mdb」が返る
    
    GetOwnFileName = ThisWorkbook.Name
    
End Function

Function GetOwnFullPath() As String
    
    '「C:\hoge\hage.mdb」上で、このメソッドを使用した場合、
    '「C:\hoge\hage.mdb」が返る
    
    GetOwnFullPath = ThisWorkbook.FullName
    
End Function

'Excel で列番号を英文字に変換する
'https://support.microsoft.com/ja-jp/help/833402/how-to-convert-excel-column-numbers-into-alphabetical-characters
Function ConvertToLetter(iCol As Integer) As String
   Dim iAlpha As Integer
   Dim iRemainder As Integer
   iAlpha = Int((iCol - 1) / 26)
   iRemainder = iCol - (iAlpha * 26)
   If iAlpha > 0 Then
      ConvertToLetter = Chr(iAlpha + 64)
   End If
   If iRemainder > 0 Then
      ConvertToLetter = ConvertToLetter & Chr(iRemainder + 64)
   End If
End Function

'"項目名:値1,値2,値3"
Function GetFilteredRange(header As Range, filter As String) As Range
    
    Dim temp As Variant
    
    Dim i As Integer
    Dim filter_col As Integer
    Dim filter_value() As String
    
    temp = header
    
    '項目名のある列位置を探す
    For i = 1 To UBound(temp, 2)
        If temp(1, i) = Split(filter, ":")(0) Then
            filter_col = header(1, i).column
        End If
    Next i
    
    '抽出するパラメータ
    filter_value = Split(Split(filter, ":")(1), ",")
    
    'オートフィルタ
    header.CurrentRegion.AutoFilter filter_col, filter_value, xlFilterValues
    
    Set GetFilteredRange = header.CurrentRegion
    
End Function

Sub CreatePivotTable(pvt_name As String, pvt_group As String, pvt_agg As String, pvt_data As Range, pvt_destination As Range)
    
    Dim groupby As Variant
    Dim i As Integer
    
    'ピボットテーブルを作成
    pvt_destination.Parent.Parent.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=pvt_data).CreatePivotTable TableDestination:=pvt_destination, TableName:=pvt_name

    'グループ行の指定
    groupby = Split(pvt_group, ",")
    ReDim Preserve groupby(1 To UBound(groupby) + 1)
    For i = 1 To UBound(groupby)
        pvt_destination.Parent.PivotTables(pvt_name).PivotFields(groupby(i)).Orientation = xlRowField
        pvt_destination.Parent.PivotTables(pvt_name).PivotFields(groupby(i)).Position = i
    Next i

    '集計値の指定
    pvt_destination.Parent.PivotTables(pvt_name).AddDataField pvt_destination.Parent.PivotTables(pvt_name).PivotFields(pvt_agg), "明細数", xlCount

    '表形式にします
    pvt_destination.Parent.PivotTables(pvt_name).RowAxisLayout xlTabularRow
    
    'グループ行のラベルを繰り返す
    pvt_destination.Parent.PivotTables(pvt_name).RepeatAllLabels xlRepeatLabels
    
    '行と列の集計を行わない（総計を出さない）
    pvt_destination.Parent.PivotTables(pvt_name).ColumnGrand = False
    pvt_destination.Parent.PivotTables(pvt_name).RowGrand = False

End Sub

'"値1,値2,値3"
Sub SetFilterOnPivotTable(pvt As PivotTable, filteringColName As String, list As String, b As Boolean)
    
    Dim temp As Variant
    Dim i As Integer
    Dim item As PivotItem
    
    temp = Split(list, ",")
    ReDim Preserve temp(1 To UBound(temp) + 1)
    
    For Each item In pvt.PivotFields(filteringColName).PivotItems
        For i = 1 To UBound(temp)
            If item.value = temp(i) Then
                item.Visible = b
                Exit For
            End If
        Next i
    Next item
  
End Sub


Sub ChangingTheGraphRange(graphName As String, hanreiRange As Range, seriesHeader As Range, graphType As XlChartType)

    Dim seriesCnt As Integer
    Dim temp As String
    Dim i As Integer
    
    'グラフデータとグラフオブジェクトは、同じシートにある前提
    With seriesHeader.Parent.ChartObjects(graphName).Chart
    
        'シリーズ（データ1行分）の集まりの数を数える
        seriesCnt = .SeriesCollection.Count
        
        'データ1行分が .seriescollection(i) です。それらを削除（グラフはまっしろけになる）
        For i = seriesCnt To 1 Step -1
            '先頭から削除するとナンバリングが動的に変わるため、最大Cntから消しにかかる
            .SeriesCollection(i).Delete
        Next i
        
        'hanreiNameの行数ぶんだけ処理を実行します
        For i = 1 To hanreiRange.Rows.Count
            
            '新しいシリーズデータ
            .SeriesCollection.NewSeries
            
            '新たなデータ参照範囲はseriesHeaderの列数ぶんになります
            temp = "=SERIES({HANREI},{LABEL},{SERIES},{ORDER})"
            temp = Replace(temp, "{HANREI}", hanreiRange.Cells(i).Address(external:=True))
            temp = Replace(temp, "{LABEL}", seriesHeader.Address(external:=True))
            temp = Replace(temp, "{SERIES}", seriesHeader.Offset(i).Address(external:=True))
            temp = Replace(temp, "{ORDER}", i)
            .SeriesCollection(i).Formula = temp
            .SeriesCollection(i).ChartType = graphType
            .SeriesCollection(i).axisGroup = xlPrimary
            
        Next i
        
    End With
    
End Sub

Sub ChangingTheGraphType(sh As Worksheet, graphName As String, seriesName As String, graphType As XlChartType, axisGroup As XlAxisGroup, Optional needLabel As Boolean, Optional labelFontSize As Integer = 10, Optional rgbColor As Long)

    Dim i As Integer
    
    With sh.ChartObjects(graphName).Chart
    
        'TODO：LOOPハズしてシリーズの名前で直接指定できないの？？
        For i = 1 To .SeriesCollection.Count
        
            If .SeriesCollection(i).Name = seriesName Then
            
                'グラフの種類
                .SeriesCollection(i).ChartType = graphType
                
                '主軸か第2軸か
                .SeriesCollection(i).axisGroup = axisGroup
                
                'データラベルの表示非表示
                If needLabel Then
                    .SeriesCollection(i).HasDataLabels = True
                    .SeriesCollection(i).DataLabels.ShowValue = True
                    .SeriesCollection(i).DataLabels.Font.Size = labelFontSize
                    .SeriesCollection(i).DataLabels.Position = xlLabelPositionAbove
                Else
                    .SeriesCollection(i).HasDataLabels = False
                End If
                
                '色の指定
                If rgbColor <> 0 Then
                    .SeriesCollection(i).Format.Line.ForeColor.RGB = rgbColor
                End If
                
            End If
            
        Next i
    
    End With

End Sub

'Excel限界を考慮した終端（行または列）を取得
'ただし、終端（行または列）に移動してから逆方向にEndをかけるため、終端に値が入っている場合はバグる
'この辺は使い分けだと思います
Function GetEnd(r As Range, direction As XlDirection) As Range

    Dim retValue As Range
    
    Select Case direction
        Case xlDown
            'いちど最下行に行ってから Ctrl+↑
            Set retValue = r.Parent.Cells(r.Parent.Rows.Count, r.column).End(xlUp)
        Case xlToLeft
            'いちど最左端に行ってから Ctrl+ →
            Set retValue = r.Parent.Cells(r.row, 1).End(xlToRight)
        Case xlToRight
            'いちど最右端に行ってから Ctrl+ ←
            Set retValue = r.Parent.Cells(r.row, r.Parent.Columns.Count).End(xlToLeft)
        Case xlUp
            'いちど最上端に行ってから Ctrl+ ↓
            Set retValue = r.Parent.Cells(1, r.column).End(xlDown)
    End Select
    
    Set GetEnd = retValue
    
End Function

'GetEndを利用して基準セル r から、direction 方面に向かってデータの塊領域を取得
Function GetRegion(r As Range, direction As XlDirection) As Range
    Set GetRegion = r.Parent.Range(r, GetEnd(r, direction))
End Function

'IsFileExistsAndNotUsingをFSOSuiteから移管（下のIsFileExistsとIsFileUsingを使用）
Private Function IsFileExists(filePath As String) As Boolean
    '▲notice
    'ファイルの存在有無を2値で返します
    'DIR関数を1ループの中で複数回使いたいときに使用します。
    'たとえば、フォルダのファイルを全て処理するルーチンで、最初にDIRを使用して
    'すべてのファイルを処理しようとする中で、さらに単ファイルの存在有無処理が必要に
    'なったときDIR関数を使うとエラーになります。そのときにこの関数で代替します。
    Dim objFSO As Object
    Dim retValue As Boolean
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    retValue = objFSO.FileExists(filePath)
    IsFileExists = retValue
End Function
Private Function IsFileUsing(path As String) As Boolean
    Dim fileSequence As Integer
    Dim retValue As Boolean
    If Dir(path) <> "" Then
        fileSequence = FreeFile
        On Error Resume Next
        Open path For Binary Lock Read Write As #fileSequence
        Close #fileSequence
    End If
    If Err.Number > 0 Then
        retValue = True
        On Error GoTo 0
    End If
    IsFileUsing = retValue
End Function
Function IsFileExistsAndNotUsing(path As String) As Boolean
    Dim retValue As Boolean
    If IsFileExists(path) And Not IsFileUsing(path) Then
        retValue = True
    End If
    IsFileExistsAndNotUsing = retValue
End Function
